# PersistentVolume pour le stockage de la base de données
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-datavolume-foyer-pv
  namespace: foyer
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  hostPath:
    path: /mnt/data  # Chemin sur le nœud Kubernetes
---
# PersistentVolumeClaim pour lier le PV au pod mysqldb
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-datavolume-foyer-pvc
  namespace: foyer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: ""
---
# Déploiement de la base de données MySQL avec un volume persistant
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysqldb
  namespace: foyer
  labels:
    app: mysqldb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysqldb
  template:
    metadata:
      labels:
        app: mysqldb
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command: ['sh', '-c', 'mysqld --initialize --user=mysql --datadir=/var/lib/mysql']
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      containers:
      - name: mysqldb
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root"
        - name: MYSQL_DATABASE
          value: "foyer_db"
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: my-datavolume-foyer-pvc
---
# Service pour exposer la base de données MySQL en interne
apiVersion: v1
kind: Service
metadata:
  name: mysqldb
  namespace: foyer
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: mysqldb
